@page "/audit/new"
@using MudBlazorFromScratch.Shared
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@*<h3>Location</h3>*@

<MudGrid Style="padding:25px;">
    @if (isLoading)
    {
        <p>Loading...</p>
    }
    else
    {
    <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" Style="width:100%;">
        <MudItem Style="margin-bottom:25px;">
            <MudText Typo="Typo.h4">Details:</MudText>
            <MudGrid Style="margin-bottom:25px;">
                <MudItem>
                    <MudAutocomplete T="string" Label="Primary Auditor" @bind-Value="primaryAuditorSelected" SearchFunc="@PrimaryAuditorSearch" ResetValueOnEmptyText="true" CoerceText="true" />
                    @*<MudTextField T="string" Label="Primary Auditor" InputType="InputType.Text" />*@
                </MudItem>
                <MudItem>
                    <MudSelect T="int" Label="Year" @bind-Value="selectedYear">
                        @for (int i = (currentYear + 5); i > (currentYear - 5); i--)
                        {
                            <MudSelectItem Value="@i" />
                        }
                    </MudSelect>
                </MudItem>
                <MudItem>
                    <MudDatePicker Label="Audit Date" @bind-Date="date" />
                </MudItem>
                <MudItem>
                    <MudTextField T="string" Label="Duration" @bind-Value="duration" InputType="InputType.Text" />
                </MudItem>
            </MudGrid>
            <MudGrid Style="margin-bottom:25px;">
                <MudItem>
                    <MudAutocomplete T="string" Label="Auditor" @bind-Value="auditorSelected" SearchFunc="@AuditorSearch" ResetValueOnEmptyText="true" CoerceText="true" />
                    @*<MudTextField T="string" Label="Auditor" InputType="InputType.Text" @bind-Value="newAuditor" />*@
                </MudItem>
                <MudItem Class="my-auto">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="AddAuditor">Add</MudButton>
                </MudItem>
            </MudGrid>
            @if (auditorsSelected.Count > 0)
            {
                <MudGrid Style="margin-bottom:25px;">
                    <MudItem>
                        <MudText>Auditors:</MudText>
                    </MudItem>
                    <MudItem>
                        <MudChipSet AllClosable="true" OnClose="RemoveAuditor">
                            @foreach (var value in auditorsSelected)
                            {
                                <MudChip Text="@(value.Name)"></MudChip>
                            }
                        </MudChipSet>
                    </MudItem>
                </MudGrid>
            }
            <MudGrid Style="margin-bottom:25px;">
                <MudItem>
                    <MudAutocomplete T="string" Label="Contact" @bind-Value="contactSelected" SearchFunc="@ContactSearch" ResetValueOnEmptyText="true" CoerceText="true" />
                    @*<MudTextField T="string" Label="Contact" InputType="InputType.Text" @bind-Value="newContact" />*@
                </MudItem>
                <MudItem Class="my-auto">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="AddContact">Add</MudButton>
                </MudItem>
            </MudGrid>
            @if (contactsSelected.Count > 0)
            {
                <MudGrid Style="margin-bottom:25px;">
                    <MudItem>
                        <MudText>Contacts:</MudText>
                    </MudItem>
                    <MudItem>
                        <MudChipSet AllClosable="true" OnClose="RemoveContact">
                            @foreach (var value in contactsSelected)
                            {
                                <MudChip Text="@(value.Name)"></MudChip>
                            }
                        </MudChipSet>
                    </MudItem>
                </MudGrid>
            }

        </MudItem>
        <MudItem Style="margin-bottom:25px;">
            <MudText Typo="Typo.h4">Country:</MudText>
            <MudGrid>
                <MudItem>
                    <MudSelect T="string" Label="Country" MaxHeight="500" @bind-Value="countrySelected" SelectedValuesChanged="CountrySelectionChanged" Style="width:500px;">
                        @foreach (var country in countriesList)
                        {
                            <MudSelectItem T="string" Value="@(country.CountryName)">@(country.CountryName)</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="AddCountry" Disabled="@isCountryAddButtonDisabled">Add</MudButton>
                </MudItem>
            </MudGrid>
            <MudGrid>
                <MudItem>
                    <MudSelect T="string" Label="Region" MaxHeight="500" SelectedValuesChanged="@(() => SelectionsChanged("region"))" @bind-Value="regionSelected" Style="width:240px;">
                        @foreach (var region in regions)
                        {
                            <MudSelectItem T="string" Value="@(region.RegionId.ToString())">@(region.RegionName)</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem>
                    <MudSelect T="string" Label="Subregion" MaxHeight="500" SelectedValuesChanged="@(() => SelectionsChanged("subregion"))" @bind-Value="subRegionSelected" Style="width:240px;">
                        @foreach (var subregion in subRegionsList)
                        {
                            <MudSelectItem T="string" Value="@(subregion.SubRegionId.ToString())">@(subregion.SubRegionName)</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="AddCountryByGroup" Disabled="@isCountryGroupAddButtonDisabled">Add</MudButton>
                </MudItem>
            </MudGrid>
        </MudItem>
        @if (countriesSelected.Count > 0)
        {
         <MudItem Style="margin-bottom:25px;">
            <MudGrid>
                <MudItem>
                    <MudText>Added Countries:</MudText>
                </MudItem>
                <MudItem>
                    <MudChipSet AllClosable="true" OnClose="Closed">
                        @foreach (var value in countriesSelected)
                        {
                            <MudChip Text="@(value.CountryName)"></MudChip>
                        }
                    </MudChipSet>
                </MudItem>
            </MudGrid>
        </MudItem>
        }
        @if (countryToAuditDetails.Count > 0)
        {
         <MudItem Style="margin-bottom:25px;">
            <MudText Typo="Typo.h4">Platform:</MudText>
            <MudTable Items="@countryToAuditDetails" Hover="true" Breakpoint="Breakpoint.Sm">
                <HeaderContent>
                    <MudTh>Country</MudTh>
                    <MudTh>Conventional</MudTh>
                    <MudTh>Crop Protection</MudTh>
                    <MudTh>Traited</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Country">@context.CountryName</MudTd>
                    <MudTd DataLabel="Conventional"><MudCheckBox @bind-Checked="@context.IsConventionalSeeds"></MudCheckBox></MudTd>
                    <MudTd DataLabel="Crop Protection"><MudCheckBox @bind-Checked="@context.IsCropProtection"></MudCheckBox></MudTd>
                    <MudTd DataLabel="Traited"><MudCheckBox @bind-Checked="@context.IsTraitedSeeds"></MudCheckBox></MudTd>
                </RowTemplate>
            </MudTable>
        </MudItem>
        }
        @if (countriesSelected.Count > 0)
        {
        <MudItem Style="margin-bottom:25px;">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="SaveAudit">Save Audit</MudButton>
        </MudItem>
        }
    </MudForm>
    }
    </MudGrid>

@code {
    private bool isLoading = true;
    private int currentYear = DateTime.Now.Year;
    private int selectedYear;
    private int value1;
    private string duration;
    DateTime? date = DateTime.Today;

    MudForm form;
    bool success;
    string[] errors = { };

    IList<Country> countries = new List<Country>();
    IList<Region> regions = new List<Region>();
    IList<SubRegion> subRegions = new List<SubRegion>();

    IList<Country> countriesList = new List<Country>();
    IList<Country> countriesSelected = new List<Country>();
    IList<SubRegion> subRegionsList = new List<SubRegion>();

    IList<CommercialUnit> commercialUnits = new List<CommercialUnit>();
    IList<CountryMapping> countryMappings = new List<CountryMapping>();

    //IList<CountryToAudit> countryToAudits = new List<CountryToAudit>();
    IList<CountryToAuditDetails> countryToAuditDetails = new List<CountryToAuditDetails>();

    private string regionSelected;
    private string subRegionSelected;
    private string countrySelected;
    private string primaryAuditorSelected;
    private string auditorSelected;
    private string contactSelected;

    IList<Person> people = new List<Person>();
    IList<Person> primaryAuditor = new List<Person>();
    IList<Person> auditorsList = new List<Person>();
    IList<Person> auditorsSelected = new List<Person>();
    IList<Person> contactsList = new List<Person>();
    IList<Person> contactsSelected = new List<Person>();

    public bool Basic_CheckBox1 { get; set; } = true;
    public bool isCountryAddButtonDisabled = true;
    public bool isCountryGroupAddButtonDisabled = true;

    IList<Audit> audits = new List<Audit>();

    protected override async Task OnInitializedAsync()
    {
        selectedYear = currentYear;
        people = await Http.GetFromJsonAsync<Person[]>("api/Person");
        primaryAuditor = auditorsList = contactsList = people;

        countriesList = countries = await Http.GetFromJsonAsync<Country[]>("api/Countries");
        regions = await Http.GetFromJsonAsync<Region[]>("api/Regions");
        subRegionsList = subRegions = await Http.GetFromJsonAsync<SubRegion[]>("api/SubRegions");

        commercialUnits = await Http.GetFromJsonAsync<CommercialUnit[]>("api/CommercialUnits");
        countryMappings = await Http.GetFromJsonAsync<CountryMapping[]>("api/CountryMappings");

        isLoading = false;
    }

    private async Task<IEnumerable<string>> PrimaryAuditorSearch(string value)
    {
        if (string.IsNullOrEmpty(value))
        {
            return primaryAuditor
                .OrderBy(p => p.Name)
                .Select(p => p.Name)
                .ToList();
        }
        else
        {
            return primaryAuditor
                .Where(p => p.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase))
                .OrderBy(p => p.Name)
                .Select(p => p.Name)
                .ToList(); ;
        }
    }

    private async Task<IEnumerable<string>> AuditorSearch(string value)
    {
        if (string.IsNullOrEmpty(value))
        {
            return auditorsList
                .OrderBy(p => p.Name)
                .Select(p => p.Name)
                .ToList();
        }
        else
        {
            return auditorsList
                .Where(p => p.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase))
                .OrderBy(p => p.Name)
                .Select(p => p.Name)
                .ToList(); ;
        }
    }

    private async void AddAuditor()
    {
        if (auditorSelected != null)
        {
            var selected = auditorsList.Where(p => p.Name == auditorSelected).First();
            auditorsSelected.Add(selected);
            auditorsList = auditorsList.Where(x => x.PersonId != selected.PersonId).ToList();
            auditorSelected = null;
        }
    }

    public void RemoveAuditor(MudChip chip)
    {
        var selected = auditorsSelected.Where(p => p.Name == chip.Text).First();
        auditorsList.Add(selected);
        auditorsSelected = auditorsSelected.Where(x => x.PersonId != selected.PersonId).ToList();
    }

    private async Task<IEnumerable<string>> ContactSearch(string value)
    {
        if (string.IsNullOrEmpty(value))
        {
            return contactsList
                .OrderBy(p => p.Name)
                .Select(p => p.Name)
                .ToList();
        }
        else
        {
            return contactsList
                .Where(p => p.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase))
                .OrderBy(p => p.Name)
                .Select(p => p.Name)
                .ToList(); ;
        }
    }

    private async void AddContact()
    {
        if (contactSelected != null)
        {
            var selected = contactsList.Where(p => p.Name == contactSelected).First();
            contactsSelected.Add(selected);
            contactsList = contactsList.Where(x => x.PersonId != selected.PersonId).ToList();
            contactSelected = null;
        }
    }

    public void RemoveContact(MudChip chip)
    {
        var selected = contactsSelected.Where(p => p.Name == chip.Text).First();
        contactsList.Add(selected);
        contactsSelected = contactsSelected.Where(x => x.PersonId != selected.PersonId).ToList();
    }

    private async void CountrySelectionChanged()
    {
        if (countrySelected != null)
        {
            isCountryAddButtonDisabled = false;
        } else
        {
            isCountryAddButtonDisabled = true;
        }
    }

    private async void SelectionsChanged(string group)
    {
        if (regionSelected != null || subRegionSelected != null)
        {
            isCountryGroupAddButtonDisabled = false;
        }

        if (group == "region")
        {
            if (subRegionSelected != null && subRegionSelected != "")
            {
                subRegionSelected = null;
            }

            var subregionIds = countryMappings
                .Where(x => x.RegionId == Int32.Parse(regionSelected))
                .GroupBy(x => new { x.SubRegionId, x.RegionId })
                .Select(x => new { x.Key.SubRegionId })
                .OrderBy(x => x.SubRegionId)
                .ToList();

            subRegionsList = new List<SubRegion>();
            foreach (var item in subregionIds)
            {
                var selected = subRegions.Where(x => x.SubRegionId == item.SubRegionId).First();
                subRegionsList.Add(selected);
            }
        }
        else if (group == "subregion")
        {
            if (regionSelected == null)
            {
                var regionId = countryMappings.Where(x => x.SubRegionId == Int32.Parse(subRegionSelected)).First().RegionId;
                regionSelected = regions.Where(x => x.RegionId == regionId).First().RegionId.ToString();
            }
        }
        else
        {
            //error
        }
    }

    private async void AddCountry()
    {
        if (countrySelected != "")
        {
            var selected = countriesList.Where(c => c.CountryName == countrySelected).First();
            countriesSelected.Add(selected);
            countriesList = countriesList.Where(x => x.CountryId != selected.CountryId).ToList();
            countrySelected = null;
            countryToAuditDetails.Add(new CountryToAuditDetails {
                CountryToAuditId =  countryToAuditDetails.Count() + 1,
                CountryId = selected.CountryId,
                CountryName = selected.CountryName,
                IsConventionalSeeds = false,
                IsCropProtection = false, IsTraitedSeeds = false
            });
            isCountryAddButtonDisabled = true;
        }
    }

    private async void AddCountryByGroup()
    {
        isCountryGroupAddButtonDisabled = true;
        var countryMappingsSelected = new List<CountryMapping>();

        if (subRegionSelected == null)
        {
            var test = regionSelected;
            var test2 = subRegionSelected;

            // add based on region
            countryMappingsSelected = countryMappings
                .Where(x => x.RegionId == Int32.Parse(regionSelected))
                .ToList();
        }
        else
        {
            var test = regionSelected;
            var test2 = subRegionSelected;

            //add based on subregion
            countryMappingsSelected = countryMappings
                .Where(x => x.SubRegionId == Int32.Parse(subRegionSelected))
                .ToList();
        }

        foreach (var item in countryMappingsSelected)
        {
            var selected = countriesList.Where(c => c.CountryId == item.CountryId).FirstOrDefault();
            if (selected != null)
            {
                countriesSelected.Add(selected);
                countriesList = countriesList.Where(x => x.CountryId != selected.CountryId).ToList();
                countryToAuditDetails.Add(new CountryToAuditDetails
                {
                    CountryToAuditId = countryToAuditDetails.Count() + 1,
                    CountryId = selected.CountryId,
                    CountryName = selected.CountryName,
                    IsConventionalSeeds = false,
                    IsCropProtection = false,
                    IsTraitedSeeds = false
                });
            }
        }

        regionSelected = null;
        subRegionSelected = null;
    }

    //public void Closed(MudChip chip) => values.Remove(chip.Text);

    public void Closed(MudChip chip)
    {
        var selected = countries.Where(c => c.CountryName == chip.Text).First();
        countriesList.Add(selected);
        countriesList = countriesList.OrderBy(x => x.CountryName).ToList();
        countriesSelected = countriesSelected.Where(x => x.CountryId != selected.CountryId).ToList();
        countryToAuditDetails = countryToAuditDetails.Where(x => x.CountryId != selected.CountryId).ToList();
    }

    public async void SaveAudit()
    {
        Audit audit = new Audit
        {
            Status = "Pre-Audit",
            Duration = Int32.Parse(duration),
            Year = date.Value.Year,
            AuditDate = date.Value
        };

        using var auditResponse = await Http.PostAsJsonAsync<Audit>("api/Audits", audit);
        var auditCreated = await auditResponse.Content.ReadFromJsonAsync<Audit>();
        var newAuditId = auditCreated.AuditId;

        IList<PersonMapping> auditPeople = new List<PersonMapping>();
        var test9 = primaryAuditorSelected;
        var test11 = people.Where(p => p.Name == primaryAuditorSelected).First().PersonId;

        //primaryAuditor
        await Http.PostAsJsonAsync<PersonMapping>("api/PersonMappings", new PersonMapping
        {
            AuditId = newAuditId,
            PersonId = people.Where(p => p.Name == primaryAuditorSelected).First().PersonId,
            IsPrimary = true,
            IsAuditor = false,
            IsContact = false
        });

        foreach(var auditor in auditorsSelected)
        {
            await Http.PostAsJsonAsync<PersonMapping>("api/PersonMappings", new PersonMapping
            {
                AuditId = newAuditId,
                PersonId = auditor.PersonId,
                IsPrimary = false,
                IsAuditor = true,
                IsContact = false
            });
        }

        foreach(var contact in contactsSelected)
        {
            await Http.PostAsJsonAsync<PersonMapping>("api/PersonMappings", new PersonMapping
            {
                AuditId = newAuditId,
                PersonId = contact.PersonId,
                IsPrimary = false,
                IsAuditor = false,
                IsContact = true
            });
        }

        foreach(var item in countryToAuditDetails)
        {
            await Http.PostAsJsonAsync<MudBlazorFromScratch.Shared.CountryToAudit>("api/CountryToAudits", new MudBlazorFromScratch.Shared.CountryToAudit
            {
                CountryId = item.CountryId,
                AuditId = newAuditId,
                IsConventionalSeeds = item.IsConventionalSeeds,
                IsCropProtection = item.IsCropProtection,
                IsTraitedSeeds = item.IsTraitedSeeds
            });
        }

        NavigationManager.NavigateTo("/audit");
    }

    public class CountryToAuditDetails
    {
        public int CountryToAuditId { get; set; }
        public int CountryId { get; set; }
        public string CountryName { get; set; }
        public bool IsConventionalSeeds { get; set; }
        public bool IsCropProtection { get; set; }
        public bool IsTraitedSeeds { get; set; }
    }
}

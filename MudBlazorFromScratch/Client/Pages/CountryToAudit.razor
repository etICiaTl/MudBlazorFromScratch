@page "/countryToAudit"
@using MudBlazorFromScratch.Shared

<MudGrid Style="padding:25px;">
    @if (isLoading)
    {
        <p>Loading...</p>
    }
    else
    {
<MudItem>
    <MudGrid>
        <MudItem>
            <MudText>Country:</MudText>
        </MudItem>
        <MudItem>
            <MudSelect T="string" Label="Country" MaxHeight="500" @bind-Value="countrySelected">
                @foreach (var country in countries)
                {
                    <MudSelectItem T="string" Value="@(country.CountryName)">@(country.CountryName)</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="AddCountry">Add</MudButton>
        </MudItem>



        <MudItem>
            <MudText>Countries:</MudText>
        </MudItem>
        <MudItem>
            <MudSelect T="string" Label="Region" MaxHeight="500" SelectedValuesChanged="@(() => SelectionsChanged("region"))" @bind-Value="regionSelected">
                @foreach (var region in regionsSelectData)
                {
                    <MudSelectItem T="string" Value="@(region.RegionId.ToString())">@(region.RegionName)</MudSelectItem>
                }
            </MudSelect>
            <MudSelect T="string" Label="Subregion" MaxHeight="500" SelectedValuesChanged="@(() => SelectionsChanged("subregion"))" @bind-Value="subRegionSelected">
                @foreach (var subregion in subRegionsSelectData)
                {
                    <MudSelectItem T="string" Value="@(subregion.SubRegionId.ToString())">@(subregion.SubRegionName)</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="AddCountryByGroup">Add</MudButton>
        </MudItem>
    </MudGrid>

    <br /><br /><br />

    <MudGrid>
        <MudItem>
            <MudText>Added Countries:</MudText>
        </MudItem>
        <MudItem>
            <MudChipSet AllClosable="true" OnClose="Closed">
                @foreach (var value in values)
                {
                    <MudChip Text="@value"></MudChip>
                }
            </MudChipSet>
        </MudItem>
    </MudGrid>


</MudItem>

    }
</MudGrid>

@code {
    bool isLoading = true;
    IList<Region> regions = new List<Region>();
    IList<Region> regionsSelectData = new List<Region>();
    IList<SubRegion> subRegions = new List<SubRegion>();
    IList<SubRegion> subRegionsSelectData = new List<SubRegion>();
    IList<CountryAlt> countries = new List<CountryAlt>();
    IList<RegionMappingAlt> regionMappingAlts = new List<RegionMappingAlt>();
    List<string> values = new List<string>();

    private string regionSelected;
    private string subRegionSelected;
    private string countrySelected;

    protected override async Task OnInitializedAsync()
    {
        await FillCountry();
        //await GetDataForSelects();
        //await CreateStringArraysForSelects();
        isLoading = false;
    }

    public void Closed(MudChip chip) => values.Remove(chip.Text);

    private async void SelectionsChanged(string group)
    {
        if (group == "region")
        {
            if (subRegionSelected != "")
            {
                subRegionSelected = "";
            }

            if (regionSelected == "1")
            {
                subRegionsSelectData = subRegions.Where(x => x.SubRegionId < 3).ToList();
            }
            else if (regionSelected == "2")
            {
                subRegionsSelectData = subRegions.Where(x => x.SubRegionId > 2).ToList();
            }
            else
            {
                //error
            }
        }
        else if (group == "subregion")
        {
            if (Int32.Parse(subRegionSelected) < 3)
            {
                regionSelected = "1";
            }
            else if (Int32.Parse(subRegionSelected) > 2)
            {
                regionSelected = "2";
            }
            else
            {
                //error
            }
        }
        else
        {
            //error
        }
        //countrySelected = countries.Where(x => x.CountryName == countryNameSelected).FirstOrDefault();
        //regionSelected = regions.Where(x => x.RegionName == regionNameSelected).FirstOrDefault();
        //subRegionSelected = subRegions.Where(x => x.SubRegionName == subRegionNameSelected).FirstOrDefault();
    }

    private async void AddCountry()
    {
        if (countrySelected != "")
        {
            values.Add(countrySelected);
        }

    }

    private async void AddCountryByGroup()
    {
        if (subRegionSelected == "")
        {
            var regionCountries = countries.Where(x => x.RegionId == Int32.Parse(regionSelected)).ToList();
            foreach (var rC in regionCountries)
            {
                values.Add(rC.CountryName);
            }
        }
        else
        {
            var regionCountries = countries.Where(x => x.SubRegionId == Int32.Parse(subRegionSelected)).ToList();
            foreach (var rC in regionCountries)
            {
                values.Add(rC.CountryName);
            }
        }
    }

    private async Task FillCountry()
    {
        regions.Add(new Region { RegionId = 1, RegionName = "LATAM" });
        regions.Add(new Region { RegionId = 2, RegionName = "EMEA" });
        subRegions.Add(new SubRegion { SubRegionId = 1, SubRegionName = "Central America" });
        subRegions.Add(new SubRegion { SubRegionId = 2, SubRegionName = "South America" });
        subRegions.Add(new SubRegion { SubRegionId = 3, SubRegionName = "UK" });
        subRegions.Add(new SubRegion { SubRegionId = 4, SubRegionName = "Russia" });
        subRegions.Add(new SubRegion { SubRegionId = 5, SubRegionName = "Africa" });
        countries.Add(new CountryAlt { CountryId = 1, CountryName = "Mexico", RegionId = 1, SubRegionId = 1 });
        countries.Add(new CountryAlt { CountryId = 2, CountryName = "Costa Rica", RegionId = 1, SubRegionId = 1 });
        countries.Add(new CountryAlt { CountryId = 3, CountryName = "Panama", RegionId = 1, SubRegionId = 1 });
        countries.Add(new CountryAlt { CountryId = 4, CountryName = "Brazil", RegionId = 1, SubRegionId = 2 });
        countries.Add(new CountryAlt { CountryId = 5, CountryName = "Chile", RegionId = 1, SubRegionId = 2 });
        countries.Add(new CountryAlt { CountryId = 6, CountryName = "Peru", RegionId = 1, SubRegionId = 2 });
        countries.Add(new CountryAlt { CountryId = 7, CountryName = "England", RegionId = 2, SubRegionId = 3 });
        countries.Add(new CountryAlt { CountryId = 8, CountryName = "Scotland", RegionId = 2, SubRegionId = 3 });
        countries.Add(new CountryAlt { CountryId = 9, CountryName = "Wales", RegionId = 2, SubRegionId = 3 });
        countries.Add(new CountryAlt { CountryId = 10, CountryName = "Russia", RegionId = 2, SubRegionId = 4 });
        countries.Add(new CountryAlt { CountryId = 11, CountryName = "Chad", RegionId = 2, SubRegionId = 5 });
        countries.Add(new CountryAlt { CountryId = 12, CountryName = "Egypt", RegionId = 2, SubRegionId = 5 });
        countries.Add(new CountryAlt { CountryId = 13, CountryName = "South Africa", RegionId = 2, SubRegionId = 5 });
        regionMappingAlts.Add(new RegionMappingAlt { RegionMappingId = 1, RegionId = 1, SubRegionId = 1 });
        regionMappingAlts.Add(new RegionMappingAlt { RegionMappingId = 2, RegionId = 1, SubRegionId = 2 });
        regionMappingAlts.Add(new RegionMappingAlt { RegionMappingId = 3, RegionId = 2, SubRegionId = 3 });
        regionMappingAlts.Add(new RegionMappingAlt { RegionMappingId = 4, RegionId = 2, SubRegionId = 4 });
        regionMappingAlts.Add(new RegionMappingAlt { RegionMappingId = 5, RegionId = 2, SubRegionId = 5 });

        subRegionsSelectData = subRegions;
        regionsSelectData = regions;
    }

    public class CountryAlt
    {
        public int CountryId { get; set; }
        public string CountryName { get; set; }
        public int RegionId { get; set; }
        public int SubRegionId { get; set; }
    }

    public class RegionMappingAlt
    {
        public int RegionMappingId { get; set; }
        public int RegionId { get; set; }
        public int SubRegionId { get; set; }
    }
}

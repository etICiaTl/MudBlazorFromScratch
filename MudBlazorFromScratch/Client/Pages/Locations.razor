@page "/location"
@using MudBlazorFromScratch.Shared
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

@*<h3>Location</h3>*@

@if (locations == null)
{
<div style="margin:10px;padding-right:10px;">
    <p><em>Loading...</em></p>
</div>
}
else
{
    <MudTable Items="@locationDTOs" Hover="true" Breakpoint="Breakpoint.Sm" Style="margin:10px;padding-right:10px;">
        <HeaderContent>
            <MudTh></MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Region</MudTh>
            <MudTh>Subregion</MudTh>
            <MudTh>Country</MudTh>
            <MudTh>Status</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd><MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => ShowBtnPress(context.LocationId))">Admin Tools</MudButton></MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Region">@context.Region</MudTd>
            <MudTd DataLabel="Subregion">@context.Subregion</MudTd>
            <MudTd DataLabel="Country">@context.Country</MudTd>
            <MudTd DataLabel="Status">@context.Status</MudTd>
        </RowTemplate>
        <ChildRowContent>
            @if (context.ShowAdminPanel)
                {
                <MudTr>
                    <MudTd>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="(() => EditLocation(context.LocationId))">Edit</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Error" @onclick="(() => DeleteLocation(context.LocationId))">Delete</MudButton>
                    </MudTd>
                </MudTr>
                }
        </ChildRowContent>
    </MudTable>
}

@code {
    private Location[] locations;
    private IEnumerable<LocationDTO> locationDTOs;

    protected override async Task OnInitializedAsync()
    {
        locations = await Http.GetFromJsonAsync<Location[]>("api/Locations");
        locationDTOs = ToDTO(locations);
    }

    private void ShowBtnPress(int nr)
    {
        LocationDTO tmpLocation = locationDTOs.First(f => f.LocationId == nr);
        tmpLocation.ShowAdminPanel = !tmpLocation.ShowAdminPanel;
    }

    private void EditLocation(int locationId)
    {
        var url = "/location/" + locationId;
        NavigationManager.NavigateTo(url);
    }

    private void DeleteLocation(int locationId)
    {
        var test = locationId;
        locationDTOs = locationDTOs.Where(x => x.LocationId != locationId).ToList();
    }

    private LocationDTO[] ToDTO(Location[] locations)
    {
        List<LocationDTO> locationDTOs = new List<LocationDTO>();

        foreach (var location in locations)
        {
            LocationDTO newLocationDTO = new LocationDTO
            {
                LocationId = location.LocationId,
                Name = location.Name,
                Region = location.Region,
                Subregion = location.Subregion,
                Country = location.Country,
                Status = location.Status,
                ShowAdminPanel = false
            };

            locationDTOs.Add(newLocationDTO);
        }

        return locationDTOs.ToArray();
    }

    private Location[] FromDTO(LocationDTO[] locationDTOs)
    {
        List<Location> locations = new List<Location>();

        foreach (var location in locationDTOs)
        {
            Location newLocation = new Location
            {
                LocationId = location.LocationId,
                Name = location.Name,
                Region = location.Region,
                Subregion = location.Subregion,
                Country = location.Country,
                Status = location.Status
            };

            locations.Add(newLocation);
        }

        return locations.ToArray();
    }
}
